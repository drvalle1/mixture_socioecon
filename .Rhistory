znew[cond]=j
}
z=znew
}
#sample psi
psi=sample.psi(z=z,dat1=dat1,nquest.cat=nquest.cat,ngroup=ngroup,
nquest=nquest,alpha=alpha,psi=psi)
#sample v
v=sample.v(z=z,loc.id=loc.id,nloc=nloc,ngroup=ngroup,
gamma1=gamma1)
theta=v.to.theta(v=v,ngroup=ngroup,nloc=nloc)
#to avoid numerical issues with log
log.psi=list()
for (j in 1:nquest){
psi.tmp=psi[[j]]
cond=psi.tmp<lo; psi.tmp[cond]=lo
cond=psi.tmp>hi; psi.tmp[cond]=hi
log.psi[[j]]=log(psi.tmp)
}
cond=theta<lo;   theta[cond]=lo
cond=theta>hi;   theta[cond]=hi
#sample z
log.theta=log(theta)
z=sample.z(log.theta=log.theta,log.psi=log.psi,
ntot=ntot,log.p.new.group=log.p.new.group,z=z,ngroup=ngroup,
loc.id=loc.id,nquest=nquest,dat1=dat1)
length(log.psi)
dim(log.psi[[1]])
ncomm
dim(log.theta)
i=1
tmp=matrix(NA,nmax.group,nquest)
for (j in 1:nquest){
ind=dat1[i,j]
tmp[,j]=log.psi[[j]][,ind]
}
tmp1=rowSums(tmp)+log.theta[loc.id,]
tmp1
ntot
length(loc.id)
tmp=matrix(NA,nmax.group,nquest)
for (j in 1:nquest){
ind=dat1[i,j]
tmp[,j]=log.psi[[j]][,ind]
}
tmp1=rowSums(tmp)+log.theta[loc.id[i],]
tmp1
log.prob=rep(NA,ntot)
for (i in 1:ntot){
tmp=matrix(NA,nmax.group,nquest)
for (j in 1:nquest){
ind=dat1[i,j]
tmp[,j]=log.psi[[j]][,ind]
}
tmp1=rowSums(tmp)+log.theta[loc.id[i],]
log.prob[i]=exp(tmp1)
}
warnings
warnings()
log.prob=rep(NA,ntot)
for (i in 1:ntot){
tmp=matrix(NA,nmax.group,nquest)
for (j in 1:nquest){
ind=dat1[i,j]
tmp[,j]=log.psi[[j]][,ind]
}
tmp1=rowSums(tmp)+log.theta[loc.id[i],]
log.prob[i]=sum(exp(tmp1))
}
head(log.prob)
prob=rep(NA,ntot)
for (i in 1:ntot){
tmp=matrix(NA,nmax.group,nquest)
for (j in 1:nquest){
ind=dat1[i,j]
tmp[,j]=log.psi[[j]][,ind]
}
tmp1=rowSums(tmp)+log.theta[loc.id[i],]
prob[i]=sum(exp(tmp1))
}
sum(log(prob))
log.likel=get.log.likel(log.theta=log.theta,log.psi=log.psi,
ntot=ntot,ngroup=ngroup,dat1=dat1,nquest=nquest,loc.id=loc.id)
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(20)
setwd('U:\\GIT_models\\mixture_socioecon')
source('mixture_locations aux functions.R')
source('mixture_locations main function.R')
dat=read.csv('fake data.csv',as.is=T)
loc.id=dat$loc.id
nloc=max(loc.id)
ntot=nrow(dat)
ind=grep('y',colnames(dat))
dat1=data.matrix(dat[,ind])
nmax.group=15 #maximum number of groups
#priors
gamma1=0.1
alpha=0.1
#number of iterations
ngibbs=1000
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(20)
setwd('U:\\GIT_models\\mixture_socioecon')
source('mixture_locations aux functions.R')
source('mixture_locations main function.R')
dat=read.csv('fake data.csv',as.is=T)
loc.id=dat$loc.id
nloc=max(loc.id)
ntot=nrow(dat)
ind=grep('y',colnames(dat))
dat1=data.matrix(dat[,ind])
nmax.group=15 #maximum number of groups
#priors
gamma1=0.1
alpha=0.1
#number of iterations
ngibbs=1000
nloc=max(loc.id)
ntot=nrow(dat1)
nquest=ncol(dat1)
#number of categories for each questions
nquest.cat=apply(dat1,2,max)
#get initial values
ngroup=nmax.group
z=sample(1:ngroup,size=ntot,replace=T)
theta=matrix(1/ngroup,nloc,ngroup)
psi=list()
for (i in 1:nquest){
psi[[i]]=matrix(1/nquest.cat[i],ngroup,nquest.cat[i])
}
#useful calculations
log.p.new.group=-sum(log(nquest.cat))
lo=0.000000001
hi=1-lo
#MCMC stuff
store.z=matrix(NA,ngibbs,ntot)
store.theta=matrix(NA,ngibbs,ngroup*nloc)
store.psi=matrix(NA,ngibbs,ngroup*sum(nquest.cat))
store.ngroup=matrix(NA,ngibbs,1)
store.loglikel=matrix(NA,ngibbs,1)
reorder1=50
#run gibbs sampler
for (i in 1:ngibbs){
print(i)
#re-order stuff from time to time
if (i%%reorder1==0){
ind=order(apply(theta,2,median),decreasing=T)
theta=theta[,ind]
for (j in 1:nquest) psi[[j]]=psi[[j]][ind,]
znew=z
for (j in 1:ngroup){
cond=z==ind[j]
znew[cond]=j
}
z=znew
}
#sample psi
psi=sample.psi(z=z,dat1=dat1,nquest.cat=nquest.cat,ngroup=ngroup,
nquest=nquest,alpha=alpha,psi=psi)
#sample v
v=sample.v(z=z,loc.id=loc.id,nloc=nloc,ngroup=ngroup,
gamma1=gamma1)
theta=v.to.theta(v=v,ngroup=ngroup,nloc=nloc)
#to avoid numerical issues with log
log.psi=list()
for (j in 1:nquest){
psi.tmp=psi[[j]]
cond=psi.tmp<lo; psi.tmp[cond]=lo
cond=psi.tmp>hi; psi.tmp[cond]=hi
log.psi[[j]]=log(psi.tmp)
}
cond=theta<lo;   theta[cond]=lo
cond=theta>hi;   theta[cond]=hi
#sample z
log.theta=log(theta)
z=sample.z(log.theta=log.theta,log.psi=log.psi,
ntot=ntot,log.p.new.group=log.p.new.group,z=z,ngroup=ngroup,
loc.id=loc.id,nquest=nquest,dat1=dat1)
#get log-likelihood
log.likel=get.log.likel(log.theta=log.theta,log.psi=log.psi,
ntot=ntot,ngroup=ngroup,dat1=dat1,nquest=nquest,loc.id=loc.id)
#store results
store.z[i,]=z
store.theta[i,]=theta
store.psi[i,]=unlist(psi)
store.ngroup[i]=max(z)
store.loglikel[i]=log.likel
}
plot(store.ngroup,type='l')
boxplot(theta)
plot(store.loglikel,type='l')
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(20)
setwd('U:\\GIT_models\\mixture_socioecon')
source('mixture_locations aux functions.R')
source('mixture_locations main function.R')
dat=read.csv('fake data.csv',as.is=T)
loc.id=dat$loc.id
nloc=max(loc.id)
ntot=nrow(dat)
ind=grep('y',colnames(dat))
dat1=data.matrix(dat[,ind])
nmax.group=15 #maximum number of groups
#priors
gamma1=0.1
alpha=0.1
#number of iterations
ngibbs=1000
#run gibbs sampler
mod=mixture_locations(dat1=dat1,nmax.group=nmax.group,loc.id=loc.id,
gamma1=gamma1,alpha=alpha,ngibbs=ngibbs)
library('MCMCpack')
set.seed(7)
setwd('U:\\GIT_models\\mixture_socioecon')
nloc=30
nobs.loc=rpois(nloc,lambda=30)+1
ntot=sum(nobs.loc)
#generate z's
ngroup=7
theta.true=theta=rdirichlet(nloc,rep(0.1,ngroup))
boxplot(theta.true)
res=numeric()
for (i in 1:nloc){
k=rmultinom(1,size=nobs.loc[i],prob=theta[i,])
tmp=rep(1:ngroup,k)
tmp1=data.frame(z=tmp,loc.id=i)
res=rbind(res,tmp1)
}
z.true=res$z
#for multinomial questions
nquestions=18
nmultin.cat=c(rep(2,15),5,3,7)
psi=list()
for (i in 1:nquestions){
psi[[i]]=rdirichlet(ngroup,rep(0.1,nmultin.cat[i]))
}
psi.true=psi
#generate multinomial data
dat=matrix(NA,ntot,nquestions)
for (i in 1:ntot){
tmp1=rep(NA,nquestions)
for (j in 1:nquestions){
tmp=rmultinom(1,size=1,prob=psi[[j]][res$z[i],])
tmp1[j]=which(tmp==1)
}
dat[i,]=tmp1
}
colnames(dat)=paste0('y',1:nquestions)
#combine and export results
fim=cbind(res,dat)
ind=which(colnames(fim)=='z')
fim1=fim[,-ind]
#look at z's
res=data.frame(zestim=mod$z[ngibbs,],ztrue=z.true)
res1=table(res); res1
#re-order data
ind=numeric()
for (i in 1:ncol(res1)){
tmp=which(res1[,i]==max(res1[,i]))
ind=c(ind,tmp)
}
res1[ind,]
#look at theta
theta.estim=matrix(mod$theta[ngibbs,],nloc,nmax.group)
boxplot(theta.estim)
plot(theta.true,theta.estim[,ind])
psi.estim=mod$psi[ngibbs,]
#convert to original list
ncat=apply(dat1,2,max)
ind.aux=1:length(psi.estim)
nquest=ncol(dat1)
psi.estim1=list()
for (i in 1:nquest){
ind1=1:(nmax.group*ncat[i])
tmp=psi.estim[ind1]
psi.estim1[[i]]=matrix(tmp,nmax.group,ncat[i])
psi.estim=psi.estim[-ind1]
}
psi.true1=psi.true[[1]]
psi.estim2=psi.estim1[[1]][ind,]
for (i in 2:nquest){
psi.true1=cbind(psi.true1,psi.true[[i]])
psi.estim2=cbind(psi.estim2,psi.estim1[[i]][ind,])
}
plot(psi.true1,psi.estim2)
plot(mod$loglikel,type='l')
plot(mod$ngroup,type='l')
theta.estim=matrix(mod$theta[ngibbs,],nloc,nmax.group)
boxplot(theta.estim)
str(mod)
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(20)
setwd('U:\\GIT_models\\mixture_socioecon')
source('mixture_locations aux functions.R')
source('mixture_locations main function.R')
dat=read.csv('fake data.csv',as.is=T)
loc.id=dat$loc.id
nloc=max(loc.id)
ntot=nrow(dat)
ind=grep('y',colnames(dat))
dat1=data.matrix(dat[,ind])
nmax.group=15 #maximum number of groups
#priors
gamma1=0.1
alpha=0.1
#number of iterations
ngibbs=1000
#run gibbs sampler
mod=mixture_locations(dat1=dat1,nmax.group=nmax.group,loc.id=loc.id,
gamma1=gamma1,alpha=alpha,ngibbs=ngibbs)
#check convergence: plot loglikelihood
plot(mod$loglikel,type='l')
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(20)
setwd('U:\\GIT_models\\mixture_socioecon')
source('mixture_locations aux functions.R')
source('mixture_locations main function.R')
dat=read.csv('fake data.csv',as.is=T)
loc.id=dat$loc.id
nloc=max(loc.id)
ntot=nrow(dat)
ind=grep('y',colnames(dat))
dat1=data.matrix(dat[,ind])
nmax.group=15 #maximum number of groups
#priors
gamma1=0.1
alpha=0.1
#number of iterations
ngibbs=1000
#run gibbs sampler
mod=mixture_locations(dat1=dat1,nmax.group=nmax.group,loc.id=loc.id,
gamma1=gamma1,alpha=alpha,ngibbs=ngibbs)
#check convergence: plot loglikelihood
plot(mod$loglikel,type='l')
plot(mod$loglikel,type='l')
nburn=ngibbs/2
res=summary.param(mod=mod,nloc=nrow(dat1),nmax.group=nmax.group,
nburn=nburn,ngibbs=ngibbs,
nquest=ncol(dat1))
ind=nburn:ngibbs
tmp=colMeans(mod$theta[ind,])
theta=matrix(tmp,nloc,nmax.group)
tmp=colMeans(mod$psi[ind,])
psi=matrix(tmp,nmax.group,nquest)
setwd('U:\\GIT_models\\mixture_socioecon')
source('mixture_locations aux functions.R')
source('mixture_locations main function.R')
nburn=ngibbs/2
res=summary.param(mod=mod,nloc=nrow(dat1),nmax.group=nmax.group,
nburn=nburn,ngibbs=ngibbs,
nquest.cat=apply(dat1,2,max))
ind=nburn:ngibbs
tmp=colMeans(mod$theta[ind,])
theta=matrix(tmp,nloc,nmax.group)
tmp=colMeans(mod$psi[ind,])
psi=matrix(tmp,nmax.group,sum(nquest.cat))
nquest.cat=apply(dat1,2,max)
psi=matrix(tmp,nmax.group,sum(nquest.cat))
nburn=ngibbs/2
res=summary.param(mod=mod,nloc=nloc,nmax.group=nmax.group,
nburn=nburn,ngibbs=ngibbs,
nquest.cat=apply(dat1,2,max))
theta.estim=res$theta
psi.estim=res$psi
boxplot(theta.estim)
head(psi)
rep(1:nquest,each=nquest.cat)
nquest=ncol(dat1)
rep(1:nquest,each=nquest.cat)
nquest.cat
?rep
rep(1:nquest,times=nquest.cat)
setwd('U:\\GIT_models\\mixture_socioecon')
source('mixture_locations aux functions.R')
source('mixture_locations main function.R')
setwd('U:\\GIT_models\\mixture_socioecon')
source('mixture_locations aux functions.R')
source('mixture_locations main function.R')
nburn=ngibbs/2
res=summary.param(mod=mod,nloc=nloc,nmax.group=nmax.group,
nburn=nburn,ngibbs=ngibbs,
nquest.cat=apply(dat1,2,max),nquest=ncol(dat1))
theta.estim=res$theta
psi.estim=res$psi
head(psi.estim)
ind=nburn:ngibbs
tmp=colMeans(mod$theta[ind,])
theta=matrix(tmp,nloc,nmax.group)
rownames(theta)=paste0('loc',1:nloc)
colnames(theta)=paste0('group',1:nmax.group)
tmp=colMeans(mod$psi[ind,])
psi=matrix(tmp,nmax.group,sum(nquest.cat))
rownames(psi)=paste0('group',1:nmax.group)
nome1=paste0('quest',rep(1:nquest,times=nquest.cat))
nome2=numeric()
for (i in 1:nquest) nome2=c(nome2,1:nquest.cat[i])
colnames(psi)=paste0(nome1,'.',nome2)
head(psi)
rm(list=ls(all=TRUE))
library('MCMCpack')
set.seed(20)
setwd('U:\\GIT_models\\mixture_socioecon')
source('mixture_locations aux functions.R')
source('mixture_locations main function.R')
dat=read.csv('fake data.csv',as.is=T)
loc.id=dat$loc.id
nloc=max(loc.id)
ntot=nrow(dat)
ind=grep('y',colnames(dat))
dat1=data.matrix(dat[,ind])
nmax.group=15 #maximum number of groups
#priors
gamma1=0.1
alpha=0.1
#number of iterations
ngibbs=1000
#run gibbs sampler
mod=mixture_locations(dat1=dat1,nmax.group=nmax.group,loc.id=loc.id,
gamma1=gamma1,alpha=alpha,ngibbs=ngibbs)
#check convergence: plot loglikelihood
plot(mod$loglikel,type='l')
nburn=ngibbs/2
res=summary.param(mod=mod,nloc=nloc,nmax.group=nmax.group,
nburn=nburn,ngibbs=ngibbs,
nquest.cat=apply(dat1,2,max),nquest=ncol(dat1))
theta.estim=res$theta
psi.estim=res$psi
boxplot(theta.estim)
head(theta)
head(theta.estim)
head(psi.estim)
res=data.frame(zestim=mod$z[ngibbs,],ztrue=z.true)
res1=table(res); res1
library('MCMCpack')
set.seed(7)
setwd('U:\\GIT_models\\mixture_socioecon')
nloc=30
nobs.loc=rpois(nloc,lambda=30)+1
ntot=sum(nobs.loc)
#generate z's
ngroup=7
theta.true=theta=rdirichlet(nloc,rep(0.1,ngroup))
boxplot(theta.true)
res=numeric()
for (i in 1:nloc){
k=rmultinom(1,size=nobs.loc[i],prob=theta[i,])
tmp=rep(1:ngroup,k)
tmp1=data.frame(z=tmp,loc.id=i)
res=rbind(res,tmp1)
}
z.true=res$z
#for multinomial questions
nquestions=18
nmultin.cat=c(rep(2,15),5,3,7)
psi=list()
for (i in 1:nquestions){
psi[[i]]=rdirichlet(ngroup,rep(0.1,nmultin.cat[i]))
}
psi.true=psi
#generate multinomial data
dat=matrix(NA,ntot,nquestions)
for (i in 1:ntot){
tmp1=rep(NA,nquestions)
for (j in 1:nquestions){
tmp=rmultinom(1,size=1,prob=psi[[j]][res$z[i],])
tmp1[j]=which(tmp==1)
}
dat[i,]=tmp1
}
colnames(dat)=paste0('y',1:nquestions)
#combine and export results
fim=cbind(res,dat)
ind=which(colnames(fim)=='z')
fim1=fim[,-ind]
res=data.frame(zestim=mod$z[ngibbs,],ztrue=z.true)
res1=table(res); res1
ind=numeric()
for (i in 1:ncol(res1)){
tmp=which(res1[,i]==max(res1[,i]))
ind=c(ind,tmp)
}
res1[ind,]
theta.estim=matrix(mod$theta[ngibbs,],nloc,nmax.group)
plot(theta.true,theta.estim[,ind])
boxplot(theta.true)
boxplot(theat.estim)
boxplot(theta.estim)
nburn=ngibbs/2
res=summary.param(mod=mod,nloc=nloc,nmax.group=nmax.group,
nburn=nburn,ngibbs=ngibbs,
nquest.cat=apply(dat1,2,max),nquest=ncol(dat1))
theta.estim=res$theta
boxplot(theta.estim)
boxplot(theta.estim,las=2)
boxplot(theta.estim[,1:10],las=2)
boxplot(theta.true)
nburn=ngibbs*9/10
res=summary.param(mod=mod,nloc=nloc,nmax.group=nmax.group,
nburn=nburn,ngibbs=ngibbs,
nquest.cat=apply(dat1,2,max),nquest=ncol(dat1))
theta.estim=res$theta
psi.estim=res$psi
boxplot(theta.estim,las=2)
boxplot(theta.estim[,1:10],las=2)
boxplot(theta.true)
theta.estim=matrix(mod$theta[ngibbs,],nloc,nmax.group)
plot(theta.true,theta.estim[,ind])
